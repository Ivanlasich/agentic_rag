#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è FastAPI Streaming API —Å Qdrant Domains
"""

import asyncio
import aiohttp
import json
import time

async def test_streaming_api():
    """–¢–µ—Å—Ç streaming API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º"""
    
    # URL API —Å–µ—Ä–≤–µ—Ä–∞
    api_url = "http://localhost:8663/stream"
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    #test_query = "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–ª–∏—Ä–∏–Ω–≥–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?"
    #test_query = "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–ª–∏—Ä–∏–Ω–≥–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?"
    test_query = "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –º–∞—Å–∫–∏ –ª–æ–≥–∏–Ω–æ–≤ –Ω–∞ —Å—Ä–æ—á–Ω–æ–º —Ä—ã–Ω–∫–µ?"
    test_query = "–ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –º–∞—Å–∫–∏ –ª–æ–≥–∏–Ω–æ–≤ –Ω–∞ —Å—Ä–æ—á–Ω–æ–º —Ä—ã–Ω–∫–µ?"

    
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º streaming API...")
    print(f"üì° URL: {api_url}")
    print(f"‚ùì –ó–∞–ø—Ä–æ—Å: {test_query}")
    print("-" * 50)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    request_data = {
        "query": test_query
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                api_url,
                json=request_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")
                    return
                
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (—Å—Ç–∞—Ç—É—Å: {response.status})")
                print("üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ streaming –¥–∞–Ω–Ω—ã—Ö...")
                print("-" * 50)
                
                # –ß–∏—Ç–∞–µ–º streaming –æ—Ç–≤–µ—Ç
                async for line in response.content:
                    line_str = line.decode('utf-8').strip()
                    
                    if not line_str:
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ SSE
                    if line_str.startswith('data: '):
                        data_str = line_str[6:]  # –£–±–∏—Ä–∞–µ–º 'data: '
                        
                        if data_str == '[DONE]':
                            print("üèÅ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                            break
                        
                        try:
                            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
                            data = json.loads(data_str)
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø—É
                            event_type = data.get('type', 'unknown')
                            timestamp = data.get('timestamp', time.time())
                            
                            if event_type == 'start':
                                print(f"üöÄ {data.get('message', '')}")
                                print(f"   –ó–∞–ø—Ä–æ—Å: {data.get('query', '')}")
                                
                            elif event_type == 'tools_info':
                                tools_count = data.get('tools', [])
                                print(f"üîß –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools_count)}")
                                for tool in tools_count:
                                    print(f"   - {tool.get('name', '')}: {tool.get('description', '')}")
                                    
                            elif event_type == 'tool_call':
                                tool_name = data.get('tool', 'unknown')
                                tool_input = data.get('tool_input', '')
                                print(f"üî® –í—ã–∑—ã–≤–∞—é tool: {tool_name}")
                                if tool_input:
                                    print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {tool_input}")
                                    
                            elif event_type == 'tool_result':
                                observation = data.get('observation', '')
                                print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç tool: {observation}")
                                
                            elif event_type == 'final_result':
                                content = data.get('content', '')
                                print(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                                print(f"   {content}")
                                
                            elif event_type == 'complete':
                                print(f"‚úÖ {data.get('message', '')}")
                                
                            elif event_type == 'error':
                                print(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', '')}")
                                
                            else:
                                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
                                print(f"   –î–∞–Ω–Ω—ã–µ: {data}")
                            
                            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                            
                        except json.JSONDecodeError as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                            print(f"   –°—Ç—Ä–æ–∫–∞: {data_str}")
                            
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                            print(f"   –î–∞–Ω–Ω—ã–µ: {data_str}")
    
    except aiohttp.ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8663")
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


async def test_simple_chat():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ chat endpoint"""
    
    api_url = "http://localhost:8663/chat"
    test_query = "–ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –º–∞—Å–∫–∏ –ª–æ–≥–∏–Ω–æ–≤ –Ω–∞ —Å—Ä–æ—á–Ω–æ–º —Ä—ã–Ω–∫–µ?"
    test_query = "–î–∞–π –º–Ω–µ –§–ò–û –î–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –ú–æ—Å–±–∏—Ä–∂–µ?"
    #test_query ="–î–∞–π –º–Ω–µ –§–ò–û –î–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –ú–æ—Å–±–∏—Ä–∂–µ?"
    #test_query ="–ú–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–∞ –æ –ù–∞—É–º–æ–≤ –î–∞–Ω–∏–∏–ª –≤ –ú–æ—Å–±–∏—Ä–∂–µ?"
    #test_query ="–ú–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–∞ –æ –ê—Ä–º–µ–Ω –ê–º–∏—Ä—Ö–∞–Ω—è–Ω –≤ –ú–æ—Å–±–∏—Ä–∂–µ?"

    print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π chat API...")
    print(f"üì° URL: {api_url}")
    print(f"‚ùì –ó–∞–ø—Ä–æ—Å: {test_query}")
    print("-" * 50)
    
    request_data = {
        "query": test_query
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                api_url,
                json=request_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
                    print(f"   –ó–∞–ø—Ä–æ—Å: {result.get('query', '')}")
                    print(f"   –û—Ç–≤–µ—Ç: {result.get('response', '')}")
                    print(f"   –í—Ä–µ–º—è: {result.get('timestamp', '')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")
                    text = await response.text()
                    print(f"   –û—Ç–≤–µ—Ç: {text}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def test_status():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ API"""
    
    api_url = "http://localhost:8663/status"
    
    print(f"\nüöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API...")
    print(f"üì° URL: {api_url}")
    print("-" * 50)
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url) as response:
                
                if response.status == 200:
                    result = await response.json()
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å API:")
                    print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status', '')}")
                    print(f"   –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {result.get('agent_initialized', '')}")
                    print(f"   –ú–æ–¥–µ–ª—å: {result.get('model', '')}")
                    print(f"   API URL: {result.get('api_url', '')}")
                    print(f"   MCP —Å–µ—Ä–≤–µ—Ä: {result.get('mcp_server', '')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI Streaming API —Å Qdrant Domains")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    #await test_status()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º streaming API
    #await test_streaming_api()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π chat
    await test_simple_chat()
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
